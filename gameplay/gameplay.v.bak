module gameplay(
    input clk,
    input resetn,
	 input p1,
	 input p2,

    output reg [3:0] state_out,
	 output reg drawErase,
	 output reg plot
	 );
	 
	 wire [27:0] randVal;
	 wire enable;
	 wire randEnable;
	 reg run = 0;
	 reg runRand = 0;
	 
	 oneSecond timer0(enable, clk, run);
	 randomCounter rCount(randVal, clk, runRand);
	 randomTimer rTimer(randEnable, clk, runRand, randVal);

    reg [3:0] current_state, next_state; 
    
    localparam  S_NEW_GAME			= 4'd0,
					 S_NEW_GAME_WAIT  = 4'd1,
					 
					 S_READY_WAIT		= 4'd2,
					 S_READY				= 4'd3,
					 S_STEADY_WAIT		= 4'd4,
					 S_STEADY			= 4'd5,
					 S_SHOOT_WAIT		= 4'd6,
					 
					 S_P1_EARLY			= 4'd7,
					 S_P2_EARLY			= 4'd8,
					 
					 S_SHOOT				= 4'd9,
					 
					 S_P1_WIN			= 4'd10,
					 S_P2_WIN			= 4'd11;
    
    // Next state logic aka our state table
    always@(*)
    begin: state_table 
            case (current_state)
                
					 S_NEW_GAME: next_state = p1 || p2 ? S_NEW_GAME_WAIT : S_NEW_GAME;
					 
                S_NEW_GAME_WAIT: next_state = ~p1 && ~p2 ? S_READY_WAIT : S_NEW_GAME_WAIT;
					 
					 
					 S_READY_WAIT: begin
											if (p1 == 1'b1)
												next_state = S_P2_EARLY;
											else if (p2 == 1'b1)
												next_state = S_P1_EARLY;
											else if (enable == 1'b1)
												next_state = S_READY;
											else
												next_state = S_READY_WAIT;
										end
					 
					 S_READY: 		begin
											if (p1 == 1'b1)
												next_state = S_P2_EARLY;
											else if (p2 == 1'b1)
												next_state = S_P1_EARLY;
											else
												next_state = S_STEADY_WAIT;
										end
					 
					 S_STEADY_WAIT: begin
											if (p1 == 1'b1)
												next_state = S_P2_EARLY;
											else if (p2 == 1'b1)
												next_state = S_P1_EARLY;
											else if (enable == 1'b1)
												next_state = S_STEADY;
											else
												next_state = S_STEADY_WAIT;
										end
					 
					 S_STEADY: 		begin
											if (p1 == 1'b1)
												next_state = S_P2_EARLY;
											else if (p2 == 1'b1)
												next_state = S_P1_EARLY;
											else
												next_state = S_SHOOT_WAIT;
										end
					 
					 S_SHOOT_WAIT: begin
											if (p1 == 1'b1)
												next_state = S_P2_EARLY;
											else if (p2 == 1'b1)
												next_state = S_P1_EARLY;
											else if (randEnable == 1'b1)
												next_state = S_SHOOT;
											else
												next_state = S_SHOOT_WAIT;
										end
					 
					 S_P1_EARLY: next_state = enable ? S_NEW_GAME : S_P1_EARLY;
					 
					 S_P2_EARLY: next_state = enable ? S_NEW_GAME : S_P2_EARLY;
					 
					 S_SHOOT: 		begin
											if (p1 == 1'b1)
												next_state = S_P1_WIN;
											else if (p2 == 1'b1)
												next_state = S_P2_WIN;
											else
												next_state = S_SHOOT;
										end
										
					 S_P1_WIN: next_state = enable ? S_NEW_GAME : S_P1_WIN;
					 
					 S_P2_WIN: next_state = enable ? S_NEW_GAME : S_P2_WIN;
					 
            default:     next_state = S_NEW_GAME;
        endcase
    end // state_table
   

    // Output logic aka all of our datapath control signals
    always @(*)
    begin: enable_signals
        // By default make all our signals 0
        state_out = 4'b0000;
		  drawErase = 1'b0;
		  plot = 1'b0;
		  run = 1'b0; 		// To restart timers used for the countdown
		  runRand = 1'b0; // To restart the random counter/timer
		  
        case (current_state)
					 
				S_NEW_GAME: begin
					 state_out = 4'b0000;
					 end
				
				S_NEW_GAME_WAIT: begin
					 state_out = 4'b0001;
					 end
					 
				S_READY_WAIT: begin
					 state_out = 4'b0010;
					 run = 1'b1;
					 end
				
				S_READY: begin
					 state_out = 4'b0011;
					 end
				
				S_STEADY_WAIT: begin
					 state_out = 4'b0100;
					 run = 1'b1;
					 end
				
				S_STEADY: begin
					 state_out = 4'b0101;
					 end
				
				S_SHOOT_WAIT: begin
					 state_out = 4'b0110;
					 runRand = 1'b1;
					 end
					 
				S_P1_EARLY: begin
					 state_out = 4'b0111;
					 end
				
				S_P2_EARLY: begin
					 state_out = 4'b1000;
					 end
					 
				S_SHOOT: begin
					 state_out = 4'b1001;
					 end
				
				S_P1_WIN: begin
					 state_out = 4'b1010;
					 end
				
				S_P2_WIN: begin
					 state_out = 4'b1011;
					 end
        endcase
    end // enable_signals
   
    // current_state registers
    always@(posedge clk)
    begin: state_FFs
        if(!resetn)
            current_state <= S_NEW_GAME;
        else
            current_state <= next_state;
    end // state_FFS
endmodule

////////////////////////////////////////////////////////////////////

// Outputs an enable signal once a second
module oneSecond(enable, clock, reset);
	output enable;
	input clock;
	input reset;
	
	reg [25:0] q = 26'b0;
	
	always @(posedge clock)
		begin
			if (reset == 0)
				q <= 0;
			else if (q == 26'b000000000000000000000000)
				q <= 26'b10111110101111000010000000;  		//For 1/sec
			else
				q <= q - 26'b000000000000000000000001;
		end
		
	assign enable = (q == 26'b0) ? 1 : 0;
endmodule

// Outputs a random number that will provide a countdown time
// between 1 and 3 seconds
module randomCounter(randVal, clock, reset);
	output reg [27:0] randVal;
	input clock;
	input reset;
	
	always @(posedge clock)
		begin
			if (reset == 0)
				randVal <= 28'b1000111100001101000110000000;
			else if (randVal == 28'b0010111110101111000010000000)	// For 1 sec
				randVal <= 28'b1000111100001101000110000000;  		// For 3 sec
			else
				randVal <= randVal - 28'b0000010011000100101101000000; // Minus 5 mil
		end
endmodule

// Outputs an enable signal once every 1-3 seconds (Counts UP from 0)
module randomTimer(enable, clock, reset, randVal);
	output enable;
	input clock;
	input reset;
	input [27:0] randVal;
	
	reg [27:0] q = 0;
	
	always @(posedge clock)
		begin
			if (reset == 0)
				q <= 0;
			else if (q == randVal)
				q <= 28'b00000000000000000000000000;  									// For 1-3 sec
			else
				q <= q + 28'b00000000000000000000000001;
		end
				
	assign enable = (q == randVal) ? 1 : 0;
endmodule